#!/home/th/parsergen

FILE <- _ ( STATEMENT _ )* UNKNOWN
STATEMENT <- DEFN / EXTERN / EXPR 
DEFN <- DEF_KW PROTO EXPR
EXTERN <- EXTERN_KW PROTO
PROTO <-  IDPROTO / BINPROTO / UNIPROTO
EXPR <- UNARY BINOPRHS 

BINOPRHS <- (OPERATOR  UNARY)*
UNARY <- PRIMARY / OPERATOR UNARY
PRIMARY <- VAREXPR / FOREXPR / IFEXPR / PAREN / IDEXPR / NUMBER 

VAREXPR <- VAR IDENTIFIER  (EQEXPR)? (SEP IDENTIFIER (EQEXPR)?)*  IN EXPR
FOREXPR <- FOR IDENTIFIER EQEXPR SEP EXPR (SEP EXPR)? IN EXPR
IFEXPR <- IF EXPR THEN EXPR ELSE EXPR
PAREN <- OP EXPR CP
IDEXPR <- IDENTIFIER CALL / IDENTIFIER

IDPROTO <- IDENTIFIER OP PROTOARG (PROTOARG )*  CP
BINPROTO <- BINARY_KW OPERATOR NUMBER? OP PROTOARG PROTOARG CP
UNIPROTO <- UNARY_KW OPERATOR OP PROTOARG CP
PROTOARG <- IDENTIFIER
CALL <- OP EXPR (SEP EXPR)* CP
EQEXPR <- OPEQL EXPR

OPERATOR <- OPERATOR_STR _
OPERATOR_STR <- [-+=*/:<>] 
UNKNOWN <- .* EOF
IDENTIFIER <- IDENTIFIER_STR ~_
IDENTIFIER_STR <- [a-zA-Z][a-zA-Z0-9]* 
NUMBER <- NUMBER_STR _
NUMBER_STR <- ([0-9]+ ('.' [0-9]*)?  / '.' [0-9]+) 

LETTER <- ![0-9. ()\t\n] .
#-------Lexing-------
LEX <- 'Lexer stuff below'

SEP <- ',' _
OPEQL <- '=' _
OP <- '(' _
CP <- ')' _
DEF_KW <- 'def' _
EXTERN_KW <- 'extern' _
IF <- 'if' _ 
THEN <- 'then' _
ELSE <- 'else' _
FOR <- 'for' _
IN <- 'in' _
BINARY_KW <- 'binary' _
UNARY_KW <- 'unary' _
VAR <- 'var' _

#-------Helpers------
#
_ <- WS* #Whitespace
WS <- WHITESPACE  / COMMENT
COMMENT <- '#' (!'\n' .)* '\n'
WHITESPACE <- [ ;\t\n]
EOF <- !.


